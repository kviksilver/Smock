{"Structs/Smock.html#/s:ZvV5Smock5Smock8logLevelOS_8LogLevel":{"name":"logLevel","abstract":"<p>Marks log level for library</p>","parent_name":"Smock"},"Structs/Smock.html":{"name":"Smock","abstract":"<p>Entry point for library, used for setting log level</p>"},"Protocols/MockedType.html#/s:ZFP5Smock10MockedType16registerSelectorFV10ObjectiveC8SelectorT_":{"name":"registerSelector(_:)","abstract":"<p>Registers simple selector call</p>","parent_name":"MockedType"},"Protocols/MockedType.html#/s:ZFP5Smock10MockedType16registerSelectorFTV10ObjectiveC8Selector6paramsGSqGSaGSqP_____T_":{"name":"registerSelector(_:params:)","abstract":"<p>Registers selector call with parameters</p>","parent_name":"MockedType"},"Protocols/MockedType.html#/s:ZFP5Smock10MockedType16registerSelectorurFV10ObjectiveC8SelectorGSqqd___":{"name":"registerSelector(_:)","abstract":"<p>Registers simple selector call and returns stubbed value</p>","parent_name":"MockedType"},"Protocols/MockedType.html#/s:ZFP5Smock10MockedType16registerSelectorurFTV10ObjectiveC8Selector6paramsGSqGSaGSqP_____GSqqd___":{"name":"registerSelector(_:params:)","abstract":"<p>Registers selector call with parameters and returns stubbed value</p>","parent_name":"MockedType"},"Protocols/MockedType.html#/s:ZFP5Smock10MockedType24numberOfCallsForSelectorFV10ObjectiveC8SelectorSi":{"name":"numberOfCallsForSelector(_:)","abstract":"<p>Queries for number of calls for given selector</p>","parent_name":"MockedType"},"Protocols/MockedType.html#/s:ZFP5Smock10MockedType21parametersForSelectorFV10ObjectiveC8SelectorGSqGSaGSqP____":{"name":"parametersForSelector(_:)","abstract":"<p>Queries for parameters passed to given selector on its last invocation</p>","parent_name":"MockedType"},"Protocols/MockedType.html#/s:ZFP5Smock10MockedType23stubbedValueForSelectorurFV10ObjectiveC8SelectorGSqqd___":{"name":"stubbedValueForSelector(_:)","abstract":"<p>Queries for stubbed values for given selector</p>","parent_name":"MockedType"},"Protocols/MockedType.html#/s:ZFP5Smock10MockedType20stubValueForSelectorFTV10ObjectiveC8SelectorGSqP___T_":{"name":"stubValueForSelector(_:_:)","abstract":"<p>Stub value for given selector</p>","parent_name":"MockedType"},"Protocols/MockedType.html#/s:ZFP5Smock10MockedType11stopMockingFT_T_":{"name":"stopMocking()","abstract":"<p>Stop mocking given object. Will clear stubbed return values, selector calls and parameters</p>","parent_name":"MockedType"},"Protocols/MockedObject.html#/s:vP5Smock12MockedObject9hashValueSi":{"name":"hashValue","abstract":"<p>Hash value to identify each object instance. Make your mock subclass NSObject to get this for free</p>","parent_name":"MockedObject"},"Protocols/MockedObject.html#/s:FP5Smock12MockedObject16registerSelectorFV10ObjectiveC8SelectorT_":{"name":"registerSelector(_:)","abstract":"<p>Registers simple selector call</p>","parent_name":"MockedObject"},"Protocols/MockedObject.html#/s:FP5Smock12MockedObject16registerSelectorFTV10ObjectiveC8Selector6paramsGSqGSaGSqP_____T_":{"name":"registerSelector(_:params:)","abstract":"<p>Registers selector call with parameters</p>","parent_name":"MockedObject"},"Protocols/MockedObject.html#/s:FP5Smock12MockedObject16registerSelectorurFV10ObjectiveC8SelectorGSqqd___":{"name":"registerSelector(_:)","abstract":"<p>Registers simple selector call and returns stubbed value</p>","parent_name":"MockedObject"},"Protocols/MockedObject.html#/s:FP5Smock12MockedObject16registerSelectorurFTV10ObjectiveC8Selector6paramsGSqGSaGSqP_____GSqqd___":{"name":"registerSelector(_:params:)","abstract":"<p>Registers selector call with parameters and returns stubbed value</p>","parent_name":"MockedObject"},"Protocols/MockedObject.html#/s:FP5Smock12MockedObject24numberOfCallsForSelectorFV10ObjectiveC8SelectorSi":{"name":"numberOfCallsForSelector(_:)","abstract":"<p>Queries for number of calls for given selector</p>","parent_name":"MockedObject"},"Protocols/MockedObject.html#/s:FP5Smock12MockedObject21parametersForSelectorFV10ObjectiveC8SelectorGSqGSaGSqP____":{"name":"parametersForSelector(_:)","abstract":"<p>Queries for parameters passed to given selector on its last invocation</p>","parent_name":"MockedObject"},"Protocols/MockedObject.html#/s:FP5Smock12MockedObject23stubbedValueForSelectorurFV10ObjectiveC8SelectorGSqqd___":{"name":"stubbedValueForSelector(_:)","abstract":"<p>Queries for stubbed values for given selector</p>","parent_name":"MockedObject"},"Protocols/MockedObject.html#/s:FP5Smock12MockedObject20stubValueForSelectorFTV10ObjectiveC8SelectorGSqP___T_":{"name":"stubValueForSelector(_:_:)","abstract":"<p>Stub value for given selector</p>","parent_name":"MockedObject"},"Protocols/MockedObject.html#/s:FP5Smock12MockedObject11stopMockingFT_T_":{"name":"stopMocking()","abstract":"<p>Stop mocking given object. Will clear stubbed return values, selector calls and parameters</p>","parent_name":"MockedObject"},"Protocols/MockedObject.html":{"name":"MockedObject","abstract":"<p>Use for mocking instance methods, all methods in this protocol are implemented in extension and should not be implemented by conforming type</p>"},"Protocols/MockedType.html":{"name":"MockedType","abstract":"<p>Use for mocking static methods, all methods in this protocol are implemented in extension and should not be implemented by conforming type</p>"},"Protocols.html#/s:P5Smock4Mock":{"name":"Mock","abstract":"<p>Umbrella protocol for both type and object</p>"},"Functions.html#/s:F5Smock22XCTAssertSelectorCallsuRxS_10MockedTyperFTMxV10ObjectiveC8SelectorSiSS4fileVs12StaticString4lineSu_T_":{"name":"XCTAssertSelectorCalls(_:_:_:_:file:line:)","abstract":"<p>Assert number of calls for given selector on a type</p>"},"Functions.html#/s:F5Smock22XCTAssertSelectorCallsuRxS_12MockedObjectrFTxV10ObjectiveC8SelectorSiSS4fileVs12StaticString4lineSu_T_":{"name":"XCTAssertSelectorCalls(_:_:_:_:file:line:)","abstract":"<p>Assert number of calls for given selector on an instance</p>"},"Enums/LogLevel.html#/s:FO5Smock8LogLevel5quietFMS0_S0_":{"name":"quiet","abstract":"<p>no logs generated</p>","parent_name":"LogLevel"},"Enums/LogLevel.html#/s:FO5Smock8LogLevel7verboseFMS0_S0_":{"name":"verbose","abstract":"<p>logs every selector registration and return value stub setting to console</p>","parent_name":"LogLevel"},"Enums/LogLevel.html":{"name":"LogLevel","abstract":"<p>Log level for Smock</p>"},"Enums.html":{"name":"Enums","abstract":"The following enums are available globally."},"Functions.html":{"name":"Functions","abstract":"The following functions are available globally."},"Protocols.html":{"name":"Protocols","abstract":"The following protocols are available globally."},"Structs.html":{"name":"Structs","abstract":"The following structs are available globally."}}